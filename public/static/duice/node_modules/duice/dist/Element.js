import { assert, setElementAttribute } from "./common";
import { Observable } from "./Observable";
/**
 * Element
 */
export class Element extends Observable {
    /**
     * Constructor
     * @param htmlElement html element
     * @param bindData bind data
     * @param context context
     * @protected
     */
    constructor(htmlElement, bindData, context) {
        var _a;
        super();
        this.htmlElement = htmlElement;
        this.bindData = bindData;
        this.context = context;
        setElementAttribute(this.htmlElement, 'id', this.generateId());
        // bind data
        let dataHandler = (_a = globalThis.Object.getOwnPropertyDescriptor(this.bindData, '_proxy_handler_')) === null || _a === void 0 ? void 0 : _a.value;
        assert(dataHandler, 'DataHandler is not found');
        this.addObserver(dataHandler);
        dataHandler.addObserver(this);
    }
    /**
     * Generate id
     * @private
     */
    generateId() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    /**
     * Gets html element
     */
    getHtmlElement() {
        return this.htmlElement;
    }
    /**
     * Gets context
     */
    getContext() {
        return this.context;
    }
    /**
     * Gets bind data
     */
    getBindData() {
        return this.bindData;
    }
}
//# sourceMappingURL=Element.js.map