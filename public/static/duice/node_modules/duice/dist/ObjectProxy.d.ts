import { ObjectProxyHandler } from "./ObjectProxyHandler";
/**
 * Object Proxy
 */
export declare class ObjectProxy extends globalThis.Object {
    /**
     * Constructor
     * @param object
     */
    constructor(object: object);
    /**
     * Gets target
     * @param objectProxy
     * @param target
     */
    static setTarget(objectProxy: object, target: object): void;
    /**
     * Sets target
     * @param objectProxy
     */
    static getTarget(objectProxy: object): any;
    /**
     * Sets proxy handler
     * @param objectProxy object proxy
     * @param objectProxyHandler object proxy handler
     */
    static setProxyHandler(objectProxy: object, objectProxyHandler: ObjectProxyHandler): void;
    /**
     * Gets proxy handler
     * @param objectProxy object proxy handler
     */
    static getProxyHandler(objectProxy: object): ObjectProxyHandler;
    /**
     * Assign object to object proxy
     * @param objectProxy
     * @param object
     */
    static assign(objectProxy: object, object: object): void;
    /**
     * Clear object properties
     * @param objectProxy
     */
    static clear(objectProxy: object): void;
    /**
     * Save object properties
     * @param objectProxy
     */
    static save(objectProxy: object): void;
    /**
     * Reset object properties
     * @param objectProxy
     */
    static reset(objectProxy: object): void;
    /**
     * Set property to be readonly
     * @param objectProxy
     * @param property
     * @param readonly
     */
    static setReadonly(objectProxy: object, property: string, readonly: boolean): void;
    /**
     * Get whether property is readonly
     * @param objectProxy
     * @param property
     */
    static isReadonly(objectProxy: object, property: string): boolean;
    /**
     * Set all properties to be readonly
     * @param objectProxy
     * @param readonly
     */
    static setReadonlyAll(objectProxy: object, readonly: boolean): void;
    /**
     * Get whether all properties are readonly
     * @param objectProxy
     */
    static isReadonlyAll(objectProxy: object): boolean;
    /**
     * Set object to be disabled
     * @param objectProxy
     * @param property
     * @param disable
     */
    static setDisable(objectProxy: object, property: string, disable: boolean): void;
    /**
     * Get whether property is disabled
     * @param objectProxy
     * @param property
     */
    static isDisable(objectProxy: object, property: string): boolean;
    /**
     * Set all properties to be disabled
     * @param objectProxy
     * @param disable
     */
    static setDisableAll(objectProxy: object, disable: boolean): void;
    /**
     * Get whether all properties are disabled
     * @param objectProxy
     */
    static isDisableAll(objectProxy: object): boolean;
    /**
     * Set property to be focused
     * @param objectProxy
     * @param property
     */
    static focus(objectProxy: object, property: string): void;
    /**
     * Set readonly before changing event listener
     * @param objectProxy
     * @param listener
     */
    static onPropertyChanging(objectProxy: object, listener: Function): void;
    /**
     * Set property after changed event listener
     * @param objectProxy
     * @param listener
     */
    static onPropertyChanged(objectProxy: object, listener: Function): void;
}
