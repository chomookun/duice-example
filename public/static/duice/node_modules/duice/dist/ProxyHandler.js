import { Observable } from "./Observable";
import { Event } from "./event/Event";
/**
 * Proxy Handler
 */
export class ProxyHandler extends Observable {
    /**
     * Constructor
     * @protected
     */
    constructor() {
        super();
        this.readonlyAll = false;
        this.readonly = new Set();
        this.disableAll = false;
        this.disable = new Set();
        this.listenerEnabled = true;
    }
    /**
     * Sets target
     * @param target
     */
    setTarget(target) {
        this.target = target;
    }
    /**
     * Gets target
     */
    getTarget() {
        return this.target;
    }
    /**
     * Sets readonly all
     * @param readonly readonly all
     */
    setReadonlyAll(readonly) {
        this.readonlyAll = readonly;
        if (!readonly) {
            this.readonly.clear();
        }
        this.notifyObservers(new Event(this));
    }
    /**
     * Returns readonly all
     */
    isReadonlyAll() {
        return this.readonlyAll;
    }
    /**
     * Sets readonly
     * @param property property
     * @param readonly readonly or not
     */
    setReadonly(property, readonly) {
        if (readonly) {
            this.readonly.add(property);
        }
        else {
            this.readonly.delete(property);
        }
        this.notifyObservers(new Event(this));
    }
    /**
     * Returns whether property is readonly
     * @param property property
     */
    isReadonly(property) {
        return this.readonlyAll || this.readonly.has(property);
    }
    /**
     * Sets disable all
     * @param disable
     */
    setDisableAll(disable) {
        this.disableAll = disable;
        if (!disable) {
            this.disable.clear();
        }
        this.notifyObservers(new Event(this));
    }
    /**
     * Returns whether all properties are disabled
     */
    isDisableAll() {
        return this.disableAll;
    }
    /**
     * Sets disable
     * @param property property
     * @param disable disable or not
     */
    setDisable(property, disable) {
        if (disable) {
            this.disable.add(property);
        }
        else {
            this.disable.delete(property);
        }
        this.notifyObservers(new Event(this));
    }
    /**
     * Returns whether property is disabled
     * @param property property
     */
    isDisable(property) {
        return this.disableAll || this.disable.has(property);
    }
    /**
     * Subscribes to property changing
     */
    suspendListener() {
        this.listenerEnabled = false;
    }
    /**
     * Resumes to property changing
     */
    resumeListener() {
        this.listenerEnabled = true;
    }
    /**
     * Checks listener
     * @param listener listener
     * @param event event
     */
    checkListener(listener, event) {
        if (this.listenerEnabled && listener) {
            let result = listener.call(this.getTarget(), event);
            if (result == false) {
                return false;
            }
        }
        return true;
    }
}
//# sourceMappingURL=ProxyHandler.js.map