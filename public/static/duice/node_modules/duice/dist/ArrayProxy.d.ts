import { ArrayProxyHandler } from "./ArrayProxyHandler";
/**
 * Array Proxy
 */
export declare class ArrayProxy extends globalThis.Array {
    /**
     * Constructor
     * @param array
     */
    constructor(array: object[]);
    /**
     * Checks if array is proxy
     * @param array array
     */
    static isProxy(array: object[]): boolean;
    /**
     * Sets target to array proxy
     * @param arrayProxy array proxy
     * @param target target
     */
    static setTarget(arrayProxy: object[], target: object[]): void;
    /**
     * Gets target from array proxy
     * @param arrayProxy
     */
    static getTarget(arrayProxy: object[]): any;
    /**
     * Sets array proxy handler
     * @param arrayProxy
     * @param arrayHandler
     */
    static setProxyHandler(arrayProxy: object[], arrayHandler: ArrayProxyHandler): void;
    /**
     * Gets array proxy handler
     * @param arrayProxy array proxy
     */
    static getProxyHandler(arrayProxy: object[]): ArrayProxyHandler;
    /**
     * Assigns array to array proxy
     * @param arrayProxy
     * @param array
     */
    static assign(arrayProxy: object[], array: object[]): void;
    /**
     * Clears array elements
     * @param arrayProxy
     */
    static clear(arrayProxy: object[]): void;
    /**
     * Save array proxy
     * @param arrayProxy
     */
    static save(arrayProxy: object[]): void;
    /**
     * Reset array proxy
     * @param arrayProxy
     */
    static reset(arrayProxy: object[]): void;
    /**
     * Sets readonly
     * @param arrayProxy array proxy
     * @param property property
     * @param readonly readonly
     */
    static setReadonly(arrayProxy: object[], property: string, readonly: boolean): void;
    /**
     * Checks if property is readonly
     * @param arrayProxy array proxy
     * @param property property
     */
    static isReadonly(arrayProxy: object[], property: string): boolean;
    /**
     * Checks if all properties are readonly
     * @param arrayProxy array proxy
     * @param readonly readonly
     */
    static setReadonlyAll(arrayProxy: object[], readonly: boolean): void;
    /**
     * Checks if all properties are readonly
     * @param arrayProxy array proxy
     */
    static isReadonlyAll(arrayProxy: object[]): boolean;
    /**
     * Sets disable
     * @param arrayProxy array proxy
     * @param property property
     * @param disable disable
     */
    static setDisable(arrayProxy: object[], property: string, disable: boolean): void;
    /**
     * Checks if property is disabled
     * @param arrayProxy array proxy
     * @param property property
     */
    static isDisable(arrayProxy: object[], property: any): boolean;
    /**
     * Sets all properties to be disabled
     * @param arrayProxy array proxy
     * @param disable disabled
     */
    static setDisableAll(arrayProxy: object[], disable: boolean): void;
    /**
     * Checks if all properties are disabled
     * @param arrayProxy array proxy
     */
    static isDisableAll(arrayProxy: object[]): boolean;
    /**
     * Inserts item
     * @param arrayProxy
     * @param index
     */
    static selectItem(arrayProxy: object[], index: number): void;
    /**
     * Gets selected item index
     * @param arrayProxy array proxy
     */
    static getSelectedItemIndex(arrayProxy: object[]): number;
    /**
     * Adds property changing listener
     * @param arrayProxy array proxy
     * @param listener listener
     */
    static onPropertyChanging(arrayProxy: object[], listener: Function): void;
    /**
     * Adds property changed listener
     * @param arrayProxy array proxy
     * @param listener listener
     */
    static onPropertyChanged(arrayProxy: object[], listener: Function): void;
    /**
     * Adds item inserting listener
     * @param arrayProxy array proxy
     * @param listener listener
     */
    static onItemInserting(arrayProxy: object[], listener: Function): void;
    /**
     * Adds item inserted listener
     * @param arrayProxy array proxy
     * @param listener listener
     */
    static onItemInserted(arrayProxy: object[], listener: Function): void;
    /**
     * Adds item deleting listener
     * @param arrayProxy array proxy
     * @param listener listener
     */
    static onItemDeleting(arrayProxy: object[], listener: Function): void;
    /**
     * Adds item deleted listener
     * @param arrayProxy array proxy
     * @param listener listener
     */
    static onItemDeleted(arrayProxy: object[], listener: Function): void;
    /**
     * Adds item moving listener
     * @param arrayProxy array proxy
     * @param listener listener
     */
    static onItemMoving(arrayProxy: object[], listener: Function): void;
    /**
     * Adds item moved listener
     * @param arrayProxy array proxy
     * @param listener listener
     */
    static onItemMoved(arrayProxy: object[], listener: Function): void;
}
