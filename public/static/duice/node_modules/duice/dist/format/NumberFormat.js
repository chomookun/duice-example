export class NumberFormat {
    /**
     * Constructor
     * @param scale scale
     */
    constructor(scale) {
        this.scale = 0;
        this.scale = scale;
    }
    /**
     * Implements format
     * @param number number
     */
    format(number) {
        if (isNaN(Number(number))) {
            return '';
        }
        number = Number(number);
        let string;
        if (this.scale > 0) {
            string = String(number.toFixed(this.scale));
        }
        else {
            string = String(number);
        }
        let reg = /(^[+-]?\d+)(\d{3})/;
        while (reg.test(string)) {
            string = string.replace(reg, '$1' + ',' + '$2');
        }
        return string;
    }
    /**
     * Implements parse
     * @param string string
     */
    parse(string) {
        if (!string) {
            return null;
        }
        if (string.length === 1 && /[+-]/.test(string)) {
            string += '0';
        }
        string = string.replace(/,/gi, '');
        if (isNaN(Number(string))) {
            throw 'NaN';
        }
        let number = Number(string);
        if (this.scale > 0) {
            number = Number(number.toFixed(this.scale));
        }
        return number;
    }
}
//# sourceMappingURL=NumberFormat.js.map