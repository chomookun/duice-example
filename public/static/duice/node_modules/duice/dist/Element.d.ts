import { Observable } from "./Observable";
import { Observer } from "./Observer";
import { Event } from "./event/Event";
/**
 * Element
 */
export declare abstract class Element<T extends HTMLElement, V> extends Observable implements Observer {
    htmlElement: T;
    bindData: V;
    context: object;
    /**
     * Constructor
     * @param htmlElement html element
     * @param bindData bind data
     * @param context context
     * @protected
     */
    protected constructor(htmlElement: T, bindData: V, context: object);
    /**
     * Generate id
     * @private
     */
    private generateId;
    /**
     * Gets html element
     */
    getHtmlElement(): T;
    /**
     * Gets context
     */
    getContext(): object;
    /**
     * Gets bind data
     */
    getBindData(): V;
    /**
     * Render
     */
    abstract render(): void;
    /**
     * Updates
     * @param observable
     * @param event
     */
    abstract update(observable: object, event: Event): void;
}
