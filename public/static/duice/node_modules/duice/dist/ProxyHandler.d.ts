import { Observable } from "./Observable";
import { Observer } from "./Observer";
import { Event } from "./event/Event";
/**
 * Proxy Handler
 */
export declare abstract class ProxyHandler<T> extends Observable implements Observer {
    target: T;
    readonlyAll: boolean;
    readonly: Set<string>;
    disableAll: boolean;
    disable: Set<string>;
    listenerEnabled: boolean;
    /**
     * Constructor
     * @protected
     */
    protected constructor();
    /**
     * Sets target
     * @param target
     */
    setTarget(target: T): void;
    /**
     * Gets target
     */
    getTarget(): T;
    /**
     * Updates
     * @param observable
     * @param event
     */
    abstract update(observable: Observable, event: Event): void;
    /**
     * Sets readonly all
     * @param readonly readonly all
     */
    setReadonlyAll(readonly: boolean): void;
    /**
     * Returns readonly all
     */
    isReadonlyAll(): boolean;
    /**
     * Sets readonly
     * @param property property
     * @param readonly readonly or not
     */
    setReadonly(property: string, readonly: boolean): void;
    /**
     * Returns whether property is readonly
     * @param property property
     */
    isReadonly(property: string): boolean;
    /**
     * Sets disable all
     * @param disable
     */
    setDisableAll(disable: boolean): void;
    /**
     * Returns whether all properties are disabled
     */
    isDisableAll(): boolean;
    /**
     * Sets disable
     * @param property property
     * @param disable disable or not
     */
    setDisable(property: string, disable: boolean): void;
    /**
     * Returns whether property is disabled
     * @param property property
     */
    isDisable(property: string): boolean;
    /**
     * Subscribes to property changing
     */
    suspendListener(): void;
    /**
     * Resumes to property changing
     */
    resumeListener(): void;
    /**
     * Checks listener
     * @param listener listener
     * @param event event
     */
    checkListener(listener: Function, event: Event): boolean;
}
