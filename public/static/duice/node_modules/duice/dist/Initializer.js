import { findVariable, getElementAttribute, getElementQuerySelector, hasElementAttribute, setElementAttribute } from "./common";
import { ElementRegistry } from "./ElementRegistry";
/**
 * Initializer
 */
export class Initializer {
    /**
     * Initialize the container with the context
     * @param container container
     * @param context context
     * @param index index (optional)
     */
    static initialize(container, context, index) {
        // scan DOM tree
        container.querySelectorAll(getElementQuerySelector()).forEach(element => {
            var _a, _b;
            if (element instanceof HTMLElement) {
                const htmlElement = element;
                if (!hasElementAttribute(htmlElement, 'id')) {
                    try {
                        let bindName = getElementAttribute(htmlElement, 'bind');
                        let bindData = findVariable(context, bindName);
                        (_b = (_a = ElementRegistry.getFactory(htmlElement, bindData, context)) === null || _a === void 0 ? void 0 : _a.createElement(htmlElement, bindData, context)) === null || _b === void 0 ? void 0 : _b.render();
                        // index
                        if (index !== undefined) {
                            setElementAttribute(htmlElement, "index", index.toString());
                        }
                    }
                    catch (e) {
                        console.error(e, htmlElement, container, JSON.stringify(context));
                    }
                }
            }
        });
    }
}
//# sourceMappingURL=Initializer.js.map