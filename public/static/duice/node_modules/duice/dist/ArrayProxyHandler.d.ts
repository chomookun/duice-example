import { ProxyHandler } from "./ProxyHandler";
import { ArrayProxy } from "./ArrayProxy";
import { Observable } from "./Observable";
import { Event } from "./event/Event";
/**
 * Array Proxy Handler
 */
export declare class ArrayProxyHandler extends ProxyHandler<object[]> {
    propertyChangingListener: Function;
    propertyChangedListener: Function;
    itemInsertingListener: Function;
    itemInsertedListener: Function;
    itemDeletingListener: Function;
    itemDeletedListener: Function;
    itemMovingListener: Function;
    itemMovedListener: Function;
    selectedItemIndex: number;
    /**
     * Constructor
     */
    constructor();
    /**
     * Get trap
     * @param target target
     * @param property property
     * @param receiver receiver
     */
    get(target: object[], property: string, receiver: object): any;
    /**
     * Set trap
     * @param target target
     * @param property property
     * @param value value
     */
    set(target: ArrayProxy, property: string, value: any): boolean;
    /**
     * Updates
     * @param observable observable
     * @param event event
     */
    update(observable: Observable, event: Event): Promise<void>;
    /**
     * Inserts items
     * @param arrayProxy array proxy
     * @param index index
     * @param items items
     */
    insertItem(arrayProxy: object[], index: number, ...items: object[]): void;
    /**
     * Deletes items from array proxy
     * @param arrayProxy array proxy to delete
     * @param index index to delete
     * @param size size for delete
     */
    deleteItem(arrayProxy: object[], index: number, size?: number): void;
    /**
     * Selects item by index
     * @param index index
     */
    selectItem(index: number): void;
    /**
     * Gets selected item index
     */
    getSelectedItemIndex(): number;
}
