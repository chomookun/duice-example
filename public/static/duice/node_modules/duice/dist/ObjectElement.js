import { findVariable, getElementAttribute, runExecuteCode, runIfCode } from "./common";
import { Element } from "./Element";
import { ObjectProxy } from "./ObjectProxy";
import { ObjectProxyHandler } from "./ObjectProxyHandler";
import { FormatFactory } from "./format/FormatFactory";
/**
 * Object Element
 */
export class ObjectElement extends Element {
    /**
     * Constructor
     * @param htmlElement html element
     * @param bindData bind data
     * @param context context
     */
    constructor(htmlElement, bindData, context) {
        super(htmlElement, bindData, context);
        // attributes
        this.property = getElementAttribute(htmlElement, 'property');
        let format = getElementAttribute(htmlElement, 'format');
        if (format) {
            this.format = FormatFactory.getFormat(format);
        }
    }
    /**
     * Gets property
     */
    getProperty() {
        return this.property;
    }
    /**
     * Gets format
     */
    getFormat() {
        return this.format;
    }
    /**
     * Overrides render
     */
    render() {
        // check if
        if (!this.checkIf()) {
            return;
        }
        // property
        if (this.property) {
            let objectHandler = ObjectProxy.getProxyHandler(this.getBindData());
            // set value
            let value = objectHandler.getValue(this.property);
            this.setValue(value);
            // set readonly
            let readonly = objectHandler.isReadonly(this.property);
            this.setReadonly(readonly);
            // set disable
            let disable = objectHandler.isDisable(this.property);
            this.setDisable(disable);
        }
        // executes script
        this.executeScript();
    }
    /**
     * Check if condition in attribute
     */
    checkIf() {
        let context = Object.assign({}, this.getContext());
        let bind = getElementAttribute(this.getHtmlElement(), 'bind');
        let bindSplit = bind.split('.');
        if (bindSplit.length > 1) {
            context[bindSplit[0]] = findVariable(context, bindSplit[0]);
        }
        else {
            context[bind] = this.getBindData();
        }
        return runIfCode(this.htmlElement, context);
    }
    /**
     * Executes script in attribute
     */
    executeScript() {
        let context = Object.assign({}, this.getContext());
        let bind = getElementAttribute(this.getHtmlElement(), 'bind');
        let bindSplit = bind.split('.');
        if (bindSplit.length > 1) {
            context[bindSplit[0]] = findVariable(context, bindSplit[0]);
        }
        else {
            context[bind] = this.getBindData();
        }
        return runExecuteCode(this.htmlElement, context);
    }
    /**
     * Updates
     * @param observable observable
     * @param event event
     */
    update(observable, event) {
        console.trace('ObjectElement.update', observable, event);
        // ObjectHandler
        if (observable instanceof ObjectProxyHandler) {
            // check if
            if (!this.checkIf()) {
                return;
            }
            // property
            if (this.property) {
                // set value
                this.setValue(observable.getValue(this.property));
                // set readonly
                this.setReadonly(observable.isReadonly(this.property));
                // set disable
                this.setDisable(observable.isDisable(this.property));
            }
            // executes script
            this.executeScript();
        }
    }
    /**
     * Sets property value
     * @param value property value
     */
    setValue(value) {
        if (value != null) {
            value = this.getFormat() ? this.getFormat().format(value) : value;
            this.htmlElement.innerText = value;
        }
        else {
            this.htmlElement.innerText = '';
        }
    }
    /**
     * Gets property value
     */
    getValue() {
        let value = this.htmlElement.innerText;
        if (value && value.trim().length > 0) {
            value = this.getFormat() ? this.getFormat().parse(value) : value;
        }
        else {
            value = null;
        }
        return value;
    }
    /**
     * Sets readonly
     * @param readonly readonly or not
     */
    setReadonly(readonly) {
        // no-op
    }
    /**
     * Sets disable
     * @param disable disable or not
     */
    setDisable(disable) {
        // no-op
    }
    /**
     * Gets index
     */
    getIndex() {
        let index = getElementAttribute(this.htmlElement, 'index');
        if (index) {
            return Number(index);
        }
    }
    /**
     * Focus
     */
    focus() {
        // no-ops
        return false;
    }
}
//# sourceMappingURL=ObjectElement.js.map