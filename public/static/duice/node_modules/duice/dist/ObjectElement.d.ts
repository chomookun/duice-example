import { Element } from "./Element";
import { Observable } from "./Observable";
import { Format } from "./format/Format";
import { Event } from "./event/Event";
/**
 * Object Element
 */
export declare class ObjectElement<T extends HTMLElement> extends Element<T, object> {
    property: string;
    format: Format;
    /**
     * Constructor
     * @param htmlElement html element
     * @param bindData bind data
     * @param context context
     */
    constructor(htmlElement: T, bindData: object, context: object);
    /**
     * Gets property
     */
    getProperty(): string;
    /**
     * Gets format
     */
    getFormat(): Format;
    /**
     * Overrides render
     */
    render(): void;
    /**
     * Check if condition in attribute
     */
    checkIf(): boolean;
    /**
     * Executes script in attribute
     */
    executeScript(): boolean;
    /**
     * Updates
     * @param observable observable
     * @param event event
     */
    update(observable: Observable, event: Event): void;
    /**
     * Sets property value
     * @param value property value
     */
    setValue(value: any): void;
    /**
     * Gets property value
     */
    getValue(): any;
    /**
     * Sets readonly
     * @param readonly readonly or not
     */
    setReadonly(readonly: boolean): void;
    /**
     * Sets disable
     * @param disable disable or not
     */
    setDisable(disable: boolean): void;
    /**
     * Gets index
     */
    getIndex(): number;
    /**
     * Focus
     */
    focus(): boolean;
}
