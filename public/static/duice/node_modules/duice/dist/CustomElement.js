import { Element } from "./Element";
import { runExecuteCode, runIfCode } from "./common";
import { Initializer } from "./Initializer";
import { ProxyHandler } from "./ProxyHandler";
/**
 * Custom Element
 */
export class CustomElement extends Element {
    constructor(htmlElement, bindData, context) {
        super(htmlElement, bindData, context);
    }
    /**
     * Renders element
     */
    render() {
        // do render
        this.doRender(this.getBindData());
        // check if
        runIfCode(this.getHtmlElement(), this.getContext());
        // initialize
        Initializer.initialize(this.getHtmlElement(), this.getContext());
        // execute script
        runExecuteCode(this.getHtmlElement(), this.getContext());
    }
    /**
     * Implements update method
     * @param observable observable
     * @param event event
     */
    update(observable, event) {
        if (observable instanceof ProxyHandler) {
            this.doUpdate(observable.getTarget());
        }
    }
}
//# sourceMappingURL=CustomElement.js.map